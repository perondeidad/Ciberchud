#ifndef SDL2_HC
#define SDL2_HC

//Cd(__DIR__);;
//#include "CrunkComm"
//#define VERBOSE
#include "Lib/LibC"

#define MAX_JOBS mp_count

#define SDL_KEYDOWN 0x300
#define SDL_KEYUP 0x301

#define SDL_RELEASED 0
#define SDL_PRESSED 1

#define PUSH_SYSV_REGS asm {PUSH RBX PUSH R12 PUSH R13 PUSH R14 PUSH R15}
#define POP_SYSV_REGS asm {POP R15 POP R14 POP R13 POP R12 POP RBX}

#define PUSH_R asm { PUSH RAX PUSH RSI PUSH RCX PUSH RDX PUSH RDI PUSH R8 PUSH R9 PUSH R10 PUSH R11 }
#define POP_R asm { POP R11 POP R10 POP R9 POP R8 POP RDI POP RDX POP RCX POP RSI POP RAX }

U8 sdl_key_state[256];
CFifoI64 *sdl_event_fifo = FifoI64New(1024);

#define SDL_SCANCODE_UNKNOWN 0
#define SDL_SCANCODE_A 4
#define SDL_SCANCODE_B 5
#define SDL_SCANCODE_C 6
#define SDL_SCANCODE_D 7
#define SDL_SCANCODE_E 8
#define SDL_SCANCODE_F 9
#define SDL_SCANCODE_G 10
#define SDL_SCANCODE_H 11
#define SDL_SCANCODE_I 12
#define SDL_SCANCODE_J 13
#define SDL_SCANCODE_K 14
#define SDL_SCANCODE_L 15
#define SDL_SCANCODE_M 16
#define SDL_SCANCODE_N 17
#define SDL_SCANCODE_O 18
#define SDL_SCANCODE_P 19
#define SDL_SCANCODE_Q 20
#define SDL_SCANCODE_R 21
#define SDL_SCANCODE_S 22
#define SDL_SCANCODE_T 23
#define SDL_SCANCODE_U 24
#define SDL_SCANCODE_V 25
#define SDL_SCANCODE_W 26
#define SDL_SCANCODE_X 27
#define SDL_SCANCODE_Y 28
#define SDL_SCANCODE_Z 29
#define SDL_SCANCODE_1 30
#define SDL_SCANCODE_2 31
#define SDL_SCANCODE_3 32
#define SDL_SCANCODE_4 33
#define SDL_SCANCODE_5 34
#define SDL_SCANCODE_6 35
#define SDL_SCANCODE_7 36
#define SDL_SCANCODE_8 37
#define SDL_SCANCODE_9 38
#define SDL_SCANCODE_0 39
#define SDL_SCANCODE_RETURN 40
#define SDL_SCANCODE_ESCAPE 41
#define SDL_SCANCODE_BACKSPACE 42
#define SDL_SCANCODE_TAB 43
#define SDL_SCANCODE_SPACE 44
#define SDL_SCANCODE_MINUS 45
#define SDL_SCANCODE_EQUALS 46
#define SDL_SCANCODE_LEFTBRACKET 47
#define SDL_SCANCODE_RIGHTBRACKET 48
#define SDL_SCANCODE_BACKSLASH 49
#define SDL_SCANCODE_NONUSHASH 50
#define SDL_SCANCODE_SEMICOLON 51
#define SDL_SCANCODE_APOSTROPHE 52
#define SDL_SCANCODE_GRAVE 53
#define SDL_SCANCODE_COMMA 54
#define SDL_SCANCODE_PERIOD 55
#define SDL_SCANCODE_SLASH 56
#define SDL_SCANCODE_CAPSLOCK 57
#define SDL_SCANCODE_F1 58
#define SDL_SCANCODE_F2 59
#define SDL_SCANCODE_F3 60
#define SDL_SCANCODE_F4 61
#define SDL_SCANCODE_F5 62
#define SDL_SCANCODE_F6 63
#define SDL_SCANCODE_F7 64
#define SDL_SCANCODE_F8 65
#define SDL_SCANCODE_F9 66
#define SDL_SCANCODE_F10 67
#define SDL_SCANCODE_F11 68
#define SDL_SCANCODE_F12 69
#define SDL_SCANCODE_PRINTSCREEN 70
#define SDL_SCANCODE_SCROLLLOCK 71
#define SDL_SCANCODE_PAUSE 72
#define SDL_SCANCODE_INSERT 73
#define SDL_SCANCODE_HOME 74
#define SDL_SCANCODE_PAGEUP 75
#define SDL_SCANCODE_DELETE 76
#define SDL_SCANCODE_END 77
#define SDL_SCANCODE_PAGEDOWN 78
#define SDL_SCANCODE_RIGHT 79
#define SDL_SCANCODE_LEFT 80
#define SDL_SCANCODE_DOWN 81
#define SDL_SCANCODE_UP 82
#define SDL_SCANCODE_NUMLOCKCLEAR 83
#define SDL_SCANCODE_KP_DIVIDE 84
#define SDL_SCANCODE_KP_MULTIPLY 85
#define SDL_SCANCODE_KP_MINUS 86
#define SDL_SCANCODE_KP_PLUS 87
#define SDL_SCANCODE_KP_ENTER 88
#define SDL_SCANCODE_KP_1 89
#define SDL_SCANCODE_KP_2 90
#define SDL_SCANCODE_KP_3 91
#define SDL_SCANCODE_KP_4 92
#define SDL_SCANCODE_KP_5 93
#define SDL_SCANCODE_KP_6 94
#define SDL_SCANCODE_KP_7 95
#define SDL_SCANCODE_KP_8 96
#define SDL_SCANCODE_KP_9 97
#define SDL_SCANCODE_KP_0 98
#define SDL_SCANCODE_KP_PERIOD 99
#define SDL_SCANCODE_NONUSBACKSLASH 100
#define SDL_SCANCODE_APPLICATION 101
#define SDL_SCANCODE_POWER 102
#define SDL_SCANCODE_KP_EQUALS 103
#define SDL_SCANCODE_F13 104
#define SDL_SCANCODE_F14 105
#define SDL_SCANCODE_F15 106
#define SDL_SCANCODE_F16 107
#define SDL_SCANCODE_F17 108
#define SDL_SCANCODE_F18 109
#define SDL_SCANCODE_F19 110
#define SDL_SCANCODE_F20 111
#define SDL_SCANCODE_F21 112
#define SDL_SCANCODE_F22 113
#define SDL_SCANCODE_F23 114
#define SDL_SCANCODE_F24 115
#define SDL_SCANCODE_EXECUTE 116
#define SDL_SCANCODE_HELP 117
#define SDL_SCANCODE_MENU 118
#define SDL_SCANCODE_SELECT 119
#define SDL_SCANCODE_STOP 120
#define SDL_SCANCODE_AGAIN 121
#define SDL_SCANCODE_UNDO 122
#define SDL_SCANCODE_CUT 123
#define SDL_SCANCODE_COPY 124
#define SDL_SCANCODE_PASTE 125
#define SDL_SCANCODE_FIND 126
#define SDL_SCANCODE_MUTE 127
#define SDL_SCANCODE_VOLUMEUP 128
#define SDL_SCANCODE_VOLUMEDOWN 129
#define SDL_SCANCODE_KP_COMMA 133
#define SDL_SCANCODE_KP_EQUALSAS400 134
#define SDL_SCANCODE_INTERNATIONAL1 135
#define SDL_SCANCODE_INTERNATIONAL2 136
#define SDL_SCANCODE_INTERNATIONAL3 137
#define SDL_SCANCODE_INTERNATIONAL4 138
#define SDL_SCANCODE_INTERNATIONAL5 139
#define SDL_SCANCODE_INTERNATIONAL6 140
#define SDL_SCANCODE_INTERNATIONAL7 141
#define SDL_SCANCODE_INTERNATIONAL8 142
#define SDL_SCANCODE_INTERNATIONAL9 143
#define SDL_SCANCODE_LANG1 144
#define SDL_SCANCODE_LANG2 145
#define SDL_SCANCODE_LANG3 146
#define SDL_SCANCODE_LANG4 147
#define SDL_SCANCODE_LANG5 148
#define SDL_SCANCODE_LANG6 149
#define SDL_SCANCODE_LANG7 150
#define SDL_SCANCODE_LANG8 151
#define SDL_SCANCODE_LANG9 152
#define SDL_SCANCODE_ALTERASE 153
#define SDL_SCANCODE_SYSREQ 154
#define SDL_SCANCODE_CANCEL 155
#define SDL_SCANCODE_CLEAR 156
#define SDL_SCANCODE_PRIOR 157
#define SDL_SCANCODE_RETURN2 158
#define SDL_SCANCODE_SEPARATOR 159
#define SDL_SCANCODE_OUT 160
#define SDL_SCANCODE_OPER 161
#define SDL_SCANCODE_CLEARAGAIN 162
#define SDL_SCANCODE_CRSEL 163
#define SDL_SCANCODE_EXSEL 164
#define SDL_SCANCODE_KP_00 176
#define SDL_SCANCODE_KP_000 177
#define SDL_SCANCODE_THOUSANDSSEPARATOR 178
#define SDL_SCANCODE_DECIMALSEPARATOR 179
#define SDL_SCANCODE_CURRENCYUNIT 180
#define SDL_SCANCODE_CURRENCYSUBUNIT 181
#define SDL_SCANCODE_KP_LEFTPAREN 182
#define SDL_SCANCODE_KP_RIGHTPAREN 183
#define SDL_SCANCODE_KP_LEFTBRACE 184
#define SDL_SCANCODE_KP_RIGHTBRACE 185
#define SDL_SCANCODE_KP_TAB 186
#define SDL_SCANCODE_KP_BACKSPACE 187
#define SDL_SCANCODE_KP_A 188
#define SDL_SCANCODE_KP_B 189
#define SDL_SCANCODE_KP_C 190
#define SDL_SCANCODE_KP_D 191
#define SDL_SCANCODE_KP_E 192
#define SDL_SCANCODE_KP_F 193
#define SDL_SCANCODE_KP_XOR 194
#define SDL_SCANCODE_KP_POWER 195
#define SDL_SCANCODE_KP_PERCENT 196
#define SDL_SCANCODE_KP_LESS 197
#define SDL_SCANCODE_KP_GREATER 198
#define SDL_SCANCODE_KP_AMPERSAND 199
#define SDL_SCANCODE_KP_DBLAMPERSAND 200
#define SDL_SCANCODE_KP_VERTICALBAR 201
#define SDL_SCANCODE_KP_DBLVERTICALBAR 202
#define SDL_SCANCODE_KP_COLON 203
#define SDL_SCANCODE_KP_HASH 204
#define SDL_SCANCODE_KP_SPACE 205
#define SDL_SCANCODE_KP_AT 206
#define SDL_SCANCODE_KP_EXCLAM 207
#define SDL_SCANCODE_KP_MEMSTORE 208
#define SDL_SCANCODE_KP_MEMRECALL 209
#define SDL_SCANCODE_KP_MEMCLEAR 210
#define SDL_SCANCODE_KP_MEMADD 211
#define SDL_SCANCODE_KP_MEMSUBTRACT 212
#define SDL_SCANCODE_KP_MEMMULTIPLY 213
#define SDL_SCANCODE_KP_MEMDIVIDE 214
#define SDL_SCANCODE_KP_PLUSMINUS 215
#define SDL_SCANCODE_KP_CLEAR 216
#define SDL_SCANCODE_KP_CLEARENTRY 217
#define SDL_SCANCODE_KP_BINARY 218
#define SDL_SCANCODE_KP_OCTAL 219
#define SDL_SCANCODE_KP_DECIMAL 220
#define SDL_SCANCODE_KP_HEXADECIMAL 221
#define SDL_SCANCODE_LCTRL 224
#define SDL_SCANCODE_LSHIFT 225
#define SDL_SCANCODE_LALT 226
#define SDL_SCANCODE_LGUI 227
#define SDL_SCANCODE_RCTRL 228
#define SDL_SCANCODE_RSHIFT 229
#define SDL_SCANCODE_RALT 230
#define SDL_SCANCODE_RGUI 231
#define SDL_SCANCODE_MODE 257
#define SDL_SCANCODE_AUDIONEXT 258
#define SDL_SCANCODE_AUDIOPREV 259
#define SDL_SCANCODE_AUDIOSTOP 260
#define SDL_SCANCODE_AUDIOPLAY 261
#define SDL_SCANCODE_AUDIOMUTE 262
#define SDL_SCANCODE_MEDIASELECT 263
#define SDL_SCANCODE_WWW 264
#define SDL_SCANCODE_MAIL 265
#define SDL_SCANCODE_CALCULATOR 266
#define SDL_SCANCODE_COMPUTER 267
#define SDL_SCANCODE_AC_SEARCH 268
#define SDL_SCANCODE_AC_HOME 269
#define SDL_SCANCODE_AC_BACK 270
#define SDL_SCANCODE_AC_FORWARD 271
#define SDL_SCANCODE_AC_STOP 272
#define SDL_SCANCODE_AC_REFRESH 273
#define SDL_SCANCODE_AC_BOOKMARKS 274
#define SDL_SCANCODE_BRIGHTNESSDOWN 275
#define SDL_SCANCODE_BRIGHTNESSUP 276
#define SDL_SCANCODE_DISPLAYSWITCH 277
#define SDL_SCANCODE_KBDILLUMTOGGLE 278
#define SDL_SCANCODE_KBDILLUMDOWN 279
#define SDL_SCANCODE_KBDILLUMUP 280
#define SDL_SCANCODE_EJECT 281
#define SDL_SCANCODE_SLEEP 282
#define SDL_SCANCODE_APP1 283
#define SDL_SCANCODE_APP2 284
#define SDL_SCANCODE_AUDIOREWIND 285
#define SDL_SCANCODE_AUDIOFASTFORWARD 286
#define SDL_SCANCODE_SOFTLEFT 287
#define SDL_SCANCODE_SOFTRIGHT 288
#define SDL_SCANCODE_CALL 289
#define SDL_SCANCODE_ENDCALL 290
#define SDL_NUM_SCANCODES 512

U8 templeos_scancode_table[116] = {
  SDL_SCANCODE_UNKNOWN,
  SDL_SCANCODE_ESCAPE,
  SDL_SCANCODE_1,
  SDL_SCANCODE_2,
  SDL_SCANCODE_3,
  SDL_SCANCODE_4,
  SDL_SCANCODE_5,
  SDL_SCANCODE_6,
  SDL_SCANCODE_7,
  SDL_SCANCODE_8,
  SDL_SCANCODE_9,
  SDL_SCANCODE_0,
  SDL_SCANCODE_MINUS,
  SDL_SCANCODE_EQUALS,
  SDL_SCANCODE_BACKSPACE,
  SDL_SCANCODE_TAB,
  SDL_SCANCODE_Q,
  SDL_SCANCODE_W,
  SDL_SCANCODE_E,
  SDL_SCANCODE_R,
  SDL_SCANCODE_T,
  SDL_SCANCODE_Y,
  SDL_SCANCODE_U,
  SDL_SCANCODE_I,
  SDL_SCANCODE_O,
  SDL_SCANCODE_P,
  SDL_SCANCODE_LEFTBRACKET,
  SDL_SCANCODE_RIGHTBRACKET,
  SDL_SCANCODE_RETURN,
  SDL_SCANCODE_LCTRL,
  SDL_SCANCODE_A,
  SDL_SCANCODE_S,
  SDL_SCANCODE_D,
  SDL_SCANCODE_F,
  SDL_SCANCODE_G,
  SDL_SCANCODE_H,
  SDL_SCANCODE_J,
  SDL_SCANCODE_K,
  SDL_SCANCODE_L,
  SDL_SCANCODE_SEMICOLON,
  SDL_SCANCODE_APOSTROPHE,
  SDL_SCANCODE_GRAVE,
  SDL_SCANCODE_LSHIFT,
  SDL_SCANCODE_BACKSLASH,
  SDL_SCANCODE_Z,
  SDL_SCANCODE_X,
  SDL_SCANCODE_C,
  SDL_SCANCODE_V,
  SDL_SCANCODE_B,
  SDL_SCANCODE_N,
  SDL_SCANCODE_M,
  SDL_SCANCODE_COMMA,
  SDL_SCANCODE_PERIOD,
  SDL_SCANCODE_SLASH,
  SDL_SCANCODE_RSHIFT,
  SDL_SCANCODE_KP_MULTIPLY,
  SDL_SCANCODE_LALT,
  SDL_SCANCODE_SPACE,
  SDL_SCANCODE_CAPSLOCK,
  SDL_SCANCODE_F1,
  SDL_SCANCODE_F2,
  SDL_SCANCODE_F3,
  SDL_SCANCODE_F4,
  SDL_SCANCODE_F5,
  SDL_SCANCODE_F6,
  SDL_SCANCODE_F7,
  SDL_SCANCODE_F8,
  SDL_SCANCODE_F9,
  SDL_SCANCODE_F10,
  SDL_SCANCODE_NUMLOCKCLEAR,
  SDL_SCANCODE_SCROLLLOCK,
  SDL_SCANCODE_KP_7,
  SDL_SCANCODE_KP_8,
  SDL_SCANCODE_KP_9,
  SDL_SCANCODE_KP_MINUS,
  SDL_SCANCODE_KP_4,
  SDL_SCANCODE_KP_5,
  SDL_SCANCODE_KP_6,
  SDL_SCANCODE_KP_PLUS,
  SDL_SCANCODE_KP_1,
  SDL_SCANCODE_KP_2,
  SDL_SCANCODE_KP_3,
  SDL_SCANCODE_KP_0,
  SDL_SCANCODE_KP_PERIOD,
  SDL_SCANCODE_UNKNOWN,
  SDL_SCANCODE_LANG5,
  SDL_SCANCODE_NONUSBACKSLASH,
  SDL_SCANCODE_F11,
  SDL_SCANCODE_F12,
  SDL_SCANCODE_INTERNATIONAL1,
  SDL_SCANCODE_LANG3,
  SDL_SCANCODE_LANG4,
  SDL_SCANCODE_INTERNATIONAL4,
  SDL_SCANCODE_INTERNATIONAL2,
  SDL_SCANCODE_INTERNATIONAL5,
  SDL_SCANCODE_INTERNATIONAL5,
  SDL_SCANCODE_KP_ENTER,
  SDL_SCANCODE_RCTRL,
  SDL_SCANCODE_KP_DIVIDE,
  SDL_SCANCODE_SYSREQ,
  SDL_SCANCODE_RALT,
  SDL_SCANCODE_UNKNOWN,
  SDL_SCANCODE_HOME,
  SDL_SCANCODE_UP,
  SDL_SCANCODE_PAGEUP,
  SDL_SCANCODE_LEFT,
  SDL_SCANCODE_RIGHT,
  SDL_SCANCODE_END,
  SDL_SCANCODE_DOWN,
  SDL_SCANCODE_PAGEDOWN,
  SDL_SCANCODE_INSERT,
  SDL_SCANCODE_DELETE,
  SDL_SCANCODE_UNKNOWN,
  SDL_SCANCODE_MUTE,
  SDL_SCANCODE_VOLUMEDOWN,
  SDL_SCANCODE_VOLUMEUP
};

class SDL_Keysym {
  U32 scancode;
  I32 sym;
  U16 mod;
  U32 unused;
};

class SDL_KeyboardEvent {
  U32 type;
  U32 timestamp;
  U32 windowID;
  U8 state;
  U8 repeat;
  U8 padding2;
  U8 padding3;
  SDL_Keysym keysym;
};

class SDL_Rect {
  I32 x, y;
  I32 w, h;
};

class SDL_Color {
  U8 r;
  U8 g;
  U8 b;
  U8 a;
};

class SDL_Palette {
  I32 ncolors;
  SDL_Color *colors;
  U32 version;
  I32 refcount;
};

class SDL_PixelFormat {
  U32 format;
  SDL_Palette *palette;
  U8 BitsPerPixel;
  U8 BytesPerPixel;
  U8 padding[2];
  U32 Rmask;
  U32 Gmask;
  U32 Bmask;
  U32 Amask;
  U8 Rloss;
  U8 Gloss;
  U8 Bloss;
  U8 Aloss;
  U8 Rshift;
  U8 Gshift;
  U8 Bshift;
  U8 Ashift;
  I32 refcount;
  SDL_PixelFormat* next;
};

class SDL_BlitMap {
  I64 placeholder;
};

class SDL_Surface {
  U64 flags; // U64 for C alignment
  SDL_PixelFormat *format;
  I32 w;
  I32 h;
  I32 pitch;
  I32 pad0; // C alignment
  U8* pixels;
  U8* userdata;
  I32 locked;
  U8* list_blitmap;
  SDL_Rect clip_rect;
  SDL_BlitMap *map;
  I32 refcount;
};

class SDL_Window {
  SDL_Surface surface;
  U8 *frontbuffer;
};

class JobWrapData {
  I32 (*fn)(U8*);
  U8 *name;
  U8* data;
  CJob *job;
  I64 used;
};

class @sdl {
  I32 mouse_x;
  I32 mouse_y;
  U64 ticks_init;
  SDL_Window win;
  JobWrapData job_data[MAX_JOBS];
};

/* Globals */
@sdl sdl;

/* Functions */
I64 @SDL_Init() {
  CommPutS("called: SDL_Init()\n");
  MemSet(&sdl_key_state, NULL, 256);
  sdl.mouse_x = mouse.pos.x;
  sdl.mouse_y = mouse.pos.y;
  sdl.ticks_init = counts.jiffies;
  MemSet(&sdl.job_data, 0, sizeof(JobWrapData)*MAX_JOBS);
  return 0;
}

U0 SDL_Init() {
  PUSH_SYSV_REGS
  asm {
    CALL &@SDL_Init;
  }
  POP_SYSV_REGS
}

I64 @SDL_GetCursor() {
  CommPutS("called: SDL_GetCursor()\n");
  return NULL;
}
U0 SDL_GetCursor() {
  PUSH_SYSV_REGS
  asm {
    CALL &@SDL_GetCursor
  }
  POP_SYSV_REGS
}

I64 @SDL_ShowCursor(I64 i) {
  CommPrint("called: SDL_ShowCursor(%d)\n", i);
  return i;
}
U0 SDL_ShowCursor() {
  PUSH_SYSV_REGS
  asm {
    PUSH RDI
    CALL &@SDL_ShowCursor
  }
  POP_SYSV_REGS
}

U0 @SDL_WarpMouseInWindow(I32 x, I32 y) {
#ifdef VERBOSE
  CommPrint("SDL_WarpMouseInWindow\n");
#endif
  sdl.mouse_x = x;
  sdl.mouse_y = y;
  MouseSet(x, y);
}
U0 SDL_WarpMouseInWindow() {
  PUSH_SYSV_REGS
  asm {
    PUSH RDX
    PUSH RSI
    CALL &@SDL_WarpMouseInWindow
  }
  POP_SYSV_REGS
}

I64 @SDL_GetRelativeMouseState(I32 *x, I32 *y) {
#ifdef VERBOSE
  CommPrint("[SDL_GetRelativeMouseState] tos:%dx%d sdl:%dx%d\n", ms.pos.x, ms.pos.y, sdl_mouse_x, sdl_mouse_y);
#endif
  *x = (mouse.pos.x - sdl.mouse_x)(I32);
  *y = (mouse.pos.y - sdl.mouse_y)(I32);
  sdl.mouse_x = mouse.pos.x;
  sdl.mouse_y = mouse.pos.y;
  return 0; // TODO
}
U0 SDL_GetRelativeMouseState() {
  PUSH_SYSV_REGS
  asm {
    PUSH RSI
    PUSH RDI
    CALL &@SDL_GetRelativeMouseState
  }
  POP_SYSV_REGS
}

U64 @SDL_GetTicks64() { return counts.jiffies - sdl.ticks_init; }
U0 SDL_GetTicks64() {
  PUSH_SYSV_REGS
  @SDL_GetTicks64();
  POP_SYSV_REGS
}

I32 @SDL_PollEvent(SDL_KeyboardEvent *event) {
  I64 ev = NULL;
  if (FifoI64Count(sdl_event_fifo)) {
    FifoI64Remove(sdl_event_fifo, &ev);
    MemCopy(event, ev, sizeof(SDL_KeyboardEvent));
    Free(ev);
    return 1;
  } else
    return 0;
}
U0 SDL_PollEvent() {
  PUSH_SYSV_REGS
  asm {
    PUSH RDI
    CALL &@SDL_PollEvent
  }
  POP_SYSV_REGS
}

U32 sdl_get_sym_for_scancode(I64 sc) {
  switch (sc) {
  case SC_ENTER:
    return '\r';
    break;
  case SC_CURSOR_UP:
    return 273;
    break;
  case SC_CURSOR_DOWN:
    return 274;
    break;
  case SC_CURSOR_LEFT:
    return 276;
    break;
  case SC_CURSOR_RIGHT:
    return 275;
    break;
  case SC_SHIFT:
    return 304;
    break;
  case SC_CTRL:
    return 306;
    break;
  case SC_ALT:
    return 308;
    break;
  default:
    return ScanCode2Char(sc);
    break;
  }
}

U0 @SDL_PumpEvents() {
#ifdef VERBOSE
  CommPrint("SDL_PumpEvents: %d %d\n", ms.pos.x, ms.pos.y);
#endif
  KbdMouseHandler(FALSE, FALSE);
  I64 i;
  Bool key_state;
  SDL_KeyboardEvent *event;
  for (i = 0; i < 256; i++) {
    key_state = Bt(kbd.down_bitmap, i);
    if (key_state != sdl_key_state[i]) {
      sdl_key_state[i] = key_state;
      event = MAllocAligned(sizeof(SDL_KeyboardEvent), 16);
      switch (key_state) {
      case 1:
        event->type = SDL_KEYDOWN;
        event->state = SDL_PRESSED;
        event->keysym.scancode = templeos_scancode_table[i];
        break;
      case 0:
        event->type = SDL_KEYUP;
        event->state = SDL_RELEASED;
        event->keysym.scancode = templeos_scancode_table[i];
        break;
      }
      FifoI64Ins(sdl_event_fifo, event);
    }
  }
  FlushMessages();
}

U0 SDL_PumpEvents() {
  PUSH_SYSV_REGS
  asm {
    CALL &@SDL_PumpEvents
  }
  POP_SYSV_REGS
}

U0 SDL_DrawIt(CTask *task, CDC *dc) {
  U64 off = sdl.win.surface.w*8;
  MemCopy(dc->body+off, sdl.win.frontbuffer+off, sdl.win.surface.w*sdl.win.surface.h-off);
}

SDL_Window* @SDL_CreateWindow(U8 *title, I32 x, I32 y, I32 w, I32 h, U32 flags) {
  CommPrint("SDL_CreateWindow: w:%d h:%d win:%x\n", w, h, &sdl.win);
//  sdl.win.surface.w = gr.screen_image->width;
//  sdl.win.surface.h = gr.screen_image->height;
  sdl.win.surface.w = 1024;
  sdl.win.surface.h = 768;
  I64 size = sdl.win.surface.w * sdl.win.surface.h;
  sdl.win.surface.pixels = CAllocAligned(size, 64, Fs->code_heap);
  sdl.win.frontbuffer = CAllocAligned(size, 64, Fs->code_heap);
  Fs->draw_it = &SDL_DrawIt;
  return &sdl.win;
}
U0 SDL_CreateWindow() {
  PUSH_SYSV_REGS
  asm {
    PUSH R9
    PUSH R8
    PUSH RCX
    PUSH RDX
    PUSH RSI
    PUSH RDI
    CALL &@SDL_CreateWindow
  }
  POP_SYSV_REGS
}

SDL_Surface* @SDL_GetWindowSurface(SDL_Window* win) {
//  CommPrint("tos win:%x surface:%x pixels:%x\n", win, &win->surface, win->surface.pixels);
  return &win->surface;
}

U0 SDL_GetWindowSurface() {
  PUSH_SYSV_REGS
  asm {
    PUSH RDI
    CALL &@SDL_GetWindowSurface
  }
  POP_SYSV_REGS
}

I64 @SDL_UpdateWindowSurface(SDL_Window* win) {
#ifdef VERBOSE
  CommPrint("SDL_UpdateWindowSurface: win:%x\n", win);
#endif
  U8 *tmp = sdl.win.frontbuffer;
  sdl.win.frontbuffer = sdl.win.surface.pixels;
  sdl.win.surface.pixels = tmp;
  Refresh;
  return 0;
}
U0 SDL_UpdateWindowSurface() {
  PUSH_SYSV_REGS
  asm {
    PUSH RDI
    CALL &@SDL_UpdateWindowSurface
  }
  POP_SYSV_REGS
}

U0 SysVJobWrapper(JobWrapData* data) {
//  CommPrint("SysVJobWrapper: fn:%x name:%s data:%x\n", data->fn, data->name, data->data);
  PUSH_R
  asm {
    // Enable SSE
    MOV_EAX_CR0
    AND AX, 0xFFFB // clear coprocessor emulation CR0.EM
    OR AX, 0x2 // set coprocessor monitoring  CR0.MP
    MOV_CR0_EAX
    MOV_EAX_CR4
    OR EAX, 3 << 9 // set CR4.OSFXSR and CR4.OSXMMEXCPT at the same time
    MOV_CR4_EAX

    MOV RSI,U64 0x10[RBP]
    MOV R10,U64 [RSI]
    MOV RDI,U64 0x10[RSI]

    PUSH RBP
    MOV RBP,RSP

    MOV RCX,RSP
    AND ECX,63
    JE SysVJobWrapperL0
    MOV EDX,64
    SUB EDX,ECX
    SUB RSP,RDX
SysVJobWrapperL0:
    CALL R10

    MOV RSP,RBP
    POP RBP
  }
  POP_R
}

I64 @SDL_CreateThread(I32 (*fn)(U8*), U8 *name, U8* data) {
  CommPrint("CreateThread: fn:%x name:%s data:%x\n", fn, name, data);
  I64 idx = 0;
//  if (mp_cnt > 1)
//    idx=1;
  for (; idx<MAX_JOBS; idx++) {
    if (!sdl.job_data[idx].used) {
      sdl.job_data[idx].used = 1;
      goto SDL_CreateThreadL0;
    }
  }
  CommPrint("CreateThread RAN OUT!!!\n");
  return NULL;
SDL_CreateThreadL0:
  JobWrapData* job = &sdl.job_data[idx];
  job->fn = fn;
  job->name = name;
  job->data = data;
  CJob* task = JobQueue(&SysVJobWrapper, job, idx, 0);
  job->job = task;
  return 0x100+idx;
}
U0 SDL_CreateThread() {
  PUSH_SYSV_REGS
  asm {
    PUSH RDX
    PUSH RSI
    PUSH RDI
    CALL &@SDL_CreateThread
  }
  POP_SYSV_REGS
}

U0 @SDL_WaitThread(I64 idx, I32* status) {
#ifdef VERBOSE
  CommPrint("WaitThread %d\n", idx);
#endif
  U64 ridx = idx - 0x100;
  *status = JobResGet(sdl.job_data[ridx].job);
  sdl.job_data[ridx].used = 0;
}
U0 SDL_WaitThread() {
  PUSH_SYSV_REGS
  asm {
    PUSH RSI
    PUSH RDI
    CALL &@SDL_WaitThread
  }
  POP_SYSV_REGS
}

class SDL_mutex {
  I64 bit;
};

#define COND_MAX 16
class SDL_cond {
  SDL_mutex mu;
  I64 wakeup[COND_MAX]; // TODO dynamic
  I64 waiting[COND_MAX]; // TODO dynamic
};

I32 @SDL_LockMutex(SDL_mutex* mutex) {
#ifdef VERBOSE
  CommPrint("Lock Mutex, %d\n", mutex->bit);
#endif
  while (LBts(&mutex->bit, 0)) Yield;
  return 0;
}
U0 SDL_LockMutex() {
  PUSH_SYSV_REGS
  asm {
    PUSH RDI
    CALL &@SDL_LockMutex
  }
  POP_SYSV_REGS
}

I32 @SDL_UnlockMutex(SDL_mutex* mutex) {
#ifdef VERBOSE
  CommPrint("Unlock Mutex\n");
#endif
  if (mutex->bit == 0)
    CommPrint("DoubleUnlock\n");
  while (!LBtr(&mutex->bit, 0)) Yield;
  return 0;
}
U0 SDL_UnlockMutex() {
  PUSH_SYSV_REGS
  asm {
    PUSH RDI
    CALL &@SDL_UnlockMutex
  }
  POP_SYSV_REGS
}

SDL_mutex* @SDL_CreateMutex() {
  SDL_mutex* mu = CAllocAligned(sizeof(SDL_mutex), 64, LibC_MainTask->code_heap);
  return mu;
}
U0 SDL_CreateMutex() {
  PUSH_SYSV_REGS
  @SDL_CreateMutex();
  POP_SYSV_REGS
}

SDL_cond* @SDL_CreateCond() {
  SDL_cond* cond = CAllocAligned(sizeof(SDL_cond), 64, LibC_MainTask->code_heap);
  return cond;
}
U0 SDL_CreateCond() {
  PUSH_SYSV_REGS
  @SDL_CreateCond();
  POP_SYSV_REGS
}

I32 @SDL_CondWait(SDL_cond* cond, SDL_mutex* mu) {
  I64 i;
  @SDL_LockMutex(&cond->mu);
  for (i=0; i<COND_MAX; i++) {
    if (cond->waiting[i] == 0) {
      cond->waiting[i] = 1;
      cond->wakeup[i] = 0;
      goto @SDL_CondWaitL0;
    }
  }
  CommPrint("ERROR CondWait should never happen\n");
  return -1;
@SDL_CondWaitL0:
  cond->mu.bit = 0;
  mu->bit = 0;
  while (!cond->wakeup[i]) Yield;
  @SDL_LockMutex(mu);
  cond->waiting[i] = 0;
  return 0;
}
U0 SDL_CondWait() {
  PUSH_SYSV_REGS
  asm {
    PUSH RSI
    PUSH RDI
    CALL &@SDL_CondWait
  }
  POP_SYSV_REGS
}

I32 @SDL_CondSignal(SDL_cond* cond) {
#ifdef VERBOSE
  CommPrint("CondSignal %x\n", cond);
#endif
  @SDL_LockMutex(&cond->mu);
  cond->wakeup[0] = 1;
  cond->mu.bit = 0;
  return 0;
}

I32 @SDL_CondBroadcast(SDL_cond* cond) {
#ifdef VERBOSE
  CommPrint("CondBroad %x\n", cond);
#endif
  I64 i=0;
  @SDL_LockMutex(&cond->mu);
  for (i=0; i<COND_MAX; i++) {
    cond->wakeup[i] = 1;
  }
  cond->mu.bit = 0;
  return 0;
}
U0 SDL_CondBroadcast() {
  PUSH_SYSV_REGS
  asm {
    PUSH RDI
    CALL &@SDL_CondBroadcast
  }
  POP_SYSV_REGS
}

U0 SDL_CondSignal() {
  PUSH_SYSV_REGS
  asm {
    PUSH RDI
    CALL &@SDL_CondBroadcast
  }
  POP_SYSV_REGS
}

U0 @SDL_Quit() {
  Free(sdl.win.surface.pixels);
  Free(sdl.win.frontbuffer);
}
U0 SDL_Quit() {
  @SDL_Quit();
}

U0 @SDL_DestroyMutex(SDL_mutex* mutex) {
  Free(mutex);
}
U0 SDL_DestroyMutex() {
  PUSH_SYSV_REGS
  asm {
    PUSH RDI
    CALL &@SDL_DestroyMutex
  }
  POP_SYSV_REGS
}

U0 @SDL_DestroyCond(SDL_cond* cond) {
  Free(cond);
}
U0 SDL_DestroyCond() {
  PUSH_SYSV_REGS
  asm {
    PUSH RDI
    CALL &@SDL_DestroyCond
  }
  POP_SYSV_REGS
}

I32 @SDL_GetCPUCount() {
  return mp_count;
}
U0 SDL_GetCPUCount() {
  @SDL_GetCPUCount();
}

#endif
